/* linux/drivers/video/samsung/s3cfb_dummymipilcd.c
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * Modified by Samsung Electronics (UK) on May 2010
 *
*/


#define MANUAL_120504 //add by xufei
#define AS_SPEC


//#define LCD_COLOR_R_B_SWAP
#define LCD_ROTATE_180
#define LCD_OP_MANUAL_PARA
#define LCD_ACL_ON	0 /*������Ϊ1��ACL���ܿ����Ŵ󴿰�ͼƬʱ��Ȼή�͡�*/

#define LCD_POWER_ON_LUM GAMMA_160CD
static const unsigned char enter_sleep_cmd[] = {0x10, 0x00};
static const unsigned char exit_sleep_cmd[] = {0x11, 0x00};
static const unsigned char display_on_cmd[] = {0x29, 0x00};
static const unsigned char display_off_cmd[] = {0x28, 0x00};

/*level2 command set*/
static const unsigned char level2_cmd_enable[] = {0xF0, 0x5A, 0x5A};
static const unsigned char MTP_key_enable[] = {0xF1, 0x5A, 0x5A};


/*panel condition set*/
#ifdef LCD_OP_MANUAL_PARA //---> we use it
static const unsigned char panel_cond_set1[] = { /*operating manual*/
//static const unsigned char panel_cond_set1[39] = { /*operating manual*/
	0xF8,
        //#ifdef MANUAL_120504
	0x3D,		
	//#else 
	//#ifdef LCD_ROTATE_180
	//0x2D, /*SS: 1b1,Source scans S[800] to S[1], GTCON:3b011,Panel scans 1280th line to 1st line. */
	//#else
	//0x1D, /*SS: 1b0,Source scans S[1] to S[800], GTCON:3b111,User mode setting*/
	//#endif
	//#endif

	0x35, 0x00, 0x00, 0x00, 0x93, 0x00, 0x3C, 0x7D, 
	0x08, 0x27, 0x7D, 0x3F, 0x00, 0x00, 0x00, 0x20, 0x04, 0x08, 
	0x6E, 0x00, 0x00, 0x00, 0x02, 0x08, 0x08, 0x23, 0x23, 0xC0, 
	0xC8, 0x08, 0x48, 0xC1, 0x00, 0xC1, 0xFF, 0xFF, 0xC8

/*	
	0x33, 0x00, 0x00, 0x00, 0x8D, 0x00, 0x3A, 0x78, 
	0x07, 0x26, 0x78, 0x3C, 0x0F, 0x08, 0x00, 0x00, 0x04, 0x08, 
	0x69, 0x08, 0x00, 0x00, 0x02, 0x07, 0x07, 0x21, 0x21, 0xC0, */

/*	0x35, 0x00, 0x00, 0x00, 0x93, 0x00, 0x3C, 0x7D, 
	0x08, 0x27, 0x7D, 0x3F, 0x00, 0x00, 0x00, 0x20, 0x04, 0x08, 
	0x6E, 0x00, 0x00, 0x00, 0x02, 0x08, 0x08, 0x23, 0x23, 0xC0, 
	0xC1, 0x01, 0x81, 0xC1, 0x00, 0xC1, 0xF6, 0xF6, 0xC1*///--->origin
};
#else
static const unsigned char panel_cond_set1[] = { /*08th.June.2012,spec*/
	0xF8,
		
	#ifdef LCD_ROTATE_180
	0x2D, /*SS: 1b1,Source scans S[800] to S[1], GTCON:3b011,Panel scans 1280th line to 1st line. */
	#else
	0x1D, /*SS: 1b0,Source scans S[1] to S[800], GTCON:3b111,User mode setting*/
	#endif
	
	0x35, 0x00, 0x00, 0x00, 0x93, 0x00, 0x3C, 0x7D, 
	0x08, 0x27, 0x7D, 0x3F, 0x00, 0x00, 0x00, 0x20, 0x04, 0x08, 
	0x6E, 0x00, 0x00, 0x00, 0x02, 0x08, 0x08, 0x23, 0x23, 0xC0, 
	0xC8, 0x08, 0x48, 0xC1, 0x00, 0xC1, 0xFF, 0xFF, 0xC8
};
#endif

static const unsigned char panel_cond_set2[] = {0xF2, 0x80, 0x03, 0x0D}; /*display area,vbp,vfp*/

/*etc condition set*/
static const unsigned char etc_cond_set_source_ctl[] = {0xF6, 0x00, 0x02,
	#ifndef MANUAL_120504
	0x00
        #endif
	
};

static const unsigned char etc_cond_set_pentile_ctl1[] = {
	0xB6, 0x0C, 0x02, 0x03, 0x32, 
	0xFF, 0x44, 0x44, 0xC0, 

	#ifdef LCD_COLOR_R_B_SWAP
	0x08 /*PID: 2b10,Scanning lower left to upper right.*/
	#else
	0x00 /*PID: 2b00,Scanning upper left to lower right.*/
	#endif

};

static const unsigned char etc_cond_set_pentile_ctl2[] = {
	0xD9, 0x14, 0x40, 0x0C, 0xCB, 0xCE, 0x6E, 0xC4, 0x07, 0x40,
	0x41,
	#ifdef MANUAL_120504
	0xCB,
	#else
 	0xD0,
        #endif
 	0x00, 0x60, 0x19
};
static const unsigned char etc_cond_set_mipi_ctl1[] = {0xE1, 0x10, 0x1C, 0x17, 0x08, 0x1D};
static const unsigned char etc_cond_set_mipi_ctl2[] = {0xE2, 0xED, 0x07, 0xC3, 0x13, 0x0D, 0x03};
static const unsigned char etc_cond_set_mipi_ctl3[] = {0xE3, 0x40};
#ifdef MANUAL_120504
static const unsigned char etc_cond_set_mipi_ctl4[] = {0xE4,0x00,0x00,0x14,0x80,0x00,0x00,0x00};//new add by xufei
#endif
static const unsigned char etc_cond_set_power_ctl[] = {0xF4, 0xCF, 0x0A, 0x12, 0x10, 

#ifdef MANUAL_120504
0x1E,
#else
0x19, 
#endif

0x33, 0x02};

/*smart dynamic elvss set*/
static unsigned char ELVSS_cond_set[] =	{0xB1, 0x04, 0x8B}; /*300cd ~ 210cd, ELVSS -4.4v*/
//static const unsigned char ELVSS_cond_set[] =	{0xB1, 0x04, 0x95}; /*200cd ~ 30cd, ELVSS -4.4v*/

/*acl parameter set*/
static const unsigned char acl_parameter_set[] = { /*300 cd*/
	0xC1, 0x47, 0x53, 0x13, 0x53, 0x00, 0x00, 0x02, 0xCF, 0x00,
	0x00, 0x04, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08,	
	0x0F, 0x16, 0x1D, 0x24, 0x2A, 0x31, 0x38, 0x3F, 0x46
};

static const unsigned char acl_off_cmd[] = {0xC0, 0x00};
static const unsigned char acl_on_cmd[] = {0xC0, 0x01};


/*gamma condition set*/
#if 0
#ifdef LCD_COLOR_R_B_SWAP /*R,B swap*/
static const unsigned char gamma_cond_set_300cd[] = { /*300 cd*/
	0xFA, 0x01, 0x5d, 0x24, 0x52, 0xB3, 0xCD, 0xBA, 0xB1, 0xC0,
	0xAD, 0xBC, 0xC7, 0xBF, 0x8A, 0x97, 0x90, 0xA5, 0xAE, 0xAA,	
	0x00, 0xD7, 0x00, 0xA8, 0x00, 0xC2
};
#else
static const unsigned char gamma_cond_set_300cd[] = { /*300 cd*/
	0xFA, 0x01, 0x52, 0x24, 0x5d, 0xBA, 0xCD, 0xB3, 0xAD, 0xC0,
	0xB1, 0xBF, 0xC7, 0xBC, 0x90, 0x97, 0x8A, 0xAA, 0xAE, 0xA5,	
	0x00, 0xC2, 0x00, 0xA8, 0x00, 0xD7
};
#endif
#endif

static const unsigned char gamma_cond_set_300cd[] = { 
0xFA,
0x01,
0x60,
0x30,
0x69,
0xC2,
0xC3,
0xB9,
0xC3,
0xC8,
0xBB,
0xD0,
0xD2,
0xC9,
0xA6,
0xAD,
0xA1,
0xBA,
0xBF,
0xB7,
0x00,
0xD7,
0x00,
0xBB,
0x00,
0xEA
};


static const unsigned char gamma_cond_set_290cd[] = {
0xFA,
0x01,
0x60,
0x30,
0x69,
0xC2,
0xC2,
0xB9,
0xC3,
0xC7,
0xBB,
0xCE,
0xD2,
0xCA,
0xA8,
0xAF,
0xA1,
0xBA,
0xBF,
0xB6,
0x00,
0xD5,
0x00,
0xB8,
0x00,
0xE8
};

static const unsigned char gamma_cond_set_280cd[] = { 
0xFA,
0x01,
0x60,
0x30,
0x69,
0xC3,
0xC3,
0xBA,
0xC2,
0xC6,
0xBB,
0xD0,
0xD4,
0xCA,
0xA7,
0xAE,
0xA1,
0xBB,
0xBF,
0xB6,
0x00,
0xD2,
0x00,
0xB6,
0x00,
0xE6
};
static const unsigned char gamma_cond_set_270cd[] = { 
0xFA,
0x01,
0x60,
0x30,
0x69,
0xC3,
0xC2,
0xB9,
0xC3,
0xC7,
0xBC,
0xD0,
0xD4,
0xCB,
0xA7,
0xAE,
0xA1,
0xBD,
0xC0,
0xB8,
0x00,
0xCF,
0x00,
0xB4,
0x00,
0xE0
};
static const unsigned char gamma_cond_set_260cd[] = { 
0xFA,
0x01,
0x60,
0x30,
0x69,
0xC3,
0xC2,
#ifdef MANUAL_120504
0xBA,
#else
0xB9,
#endif
0xC3,
0xC7,
0xBC,
0xD0,
0xD3,
0xCB,
0xA8,
0xAF,
0xA1,
0xBB,
0xC1,
0xB8,
0x00,
0xCE,
0x00,
0xB1,
0x00,
0xE0
};
static const unsigned char gamma_cond_set_250cd[] = { 
0xFA,
0x01,
0x60,
0x30,
0x69,
0xC3,
0xC1,
0xB9,
0xC3,
0xC7,
0xBB,
0xCF,
0xD4,
0xCC,
0xA9,
0xAF,
0xA1,
0xBD,
0xC1,
0xBA,
0x00,
0xCB,
0x00,
0xAF,
0x00,
0xDD
};
static const unsigned char gamma_cond_set_240cd[] = { 
0xFA,
0x01,
0x60,
0x30,
0x69,
0xC2,
0xC1,
0xBA,
0xC3,
0xC7,
0xBC,
0xCE,
0xD3,
0xCB,
0xAA,
0xB0,
0xA2,
0xBD,
0xC2,
0xB9,
0x00,
0xC9,
0x00,
0xAC,
0x00,
0xDB
};
static const unsigned char gamma_cond_set_230cd[] = { 
0xFA,
0x01,
0x60,
0x30,
0x69,
0xC1,
0xBF,
0xB9,
0xC4,
0xC8,
0xBC,
0xD1,
0xD4,
0xCC,
0xAA,
0xB1,
0xA4,
0xBF,
0xC1,
0xB8,
0x00,
0xC4,
0x00,
0xAA,
0x00,
0xD8
};
static const unsigned char gamma_cond_set_220cd[] = { 
0xFA,
0x01,
0x60,
0x30,
0x69,
0xC2,
0xBE,
0xB8,
0xC4,
0xC8,
0xC0,
0xCF,
0xD3,
0xCA,
0xAB,
0xB2,
0xA4,
0xBF,
0xC3,
0xBA,
0x00,
0xC3,
0x00,
0xA7,
0x00,
0xD5
};
static const unsigned char gamma_cond_set_210cd[] = { 
0xFA,
0x01,
0x60,
0x30,
0x69,
0xC2,
0xC0,
0xBB,
0xC3,
0xC7,
0xBC,
0xD0,
0xD4,
0xCC,
0xAB,
0xB2,
0xA5,
0xBF,
0xC3,
0xBA,
0x00,
0xC1,
0x00,
0xA5,
0x00,
0xD2
};
static const unsigned char gamma_cond_set_200cd[] = { 
0xFA,
0x01,
0x60,
0x30,
0x69,
0xC2,
0xBD,
0xBB,
0xC3,
0xC7,
0xBD,
0xD1,
0xD4,
0xCB,
0xAB,
0xB2,
0xA4,
0xBF,
0xC4,
0xBB,
0x00,
0xBF,
0x00,
0xA2,
0x00,
0xD0
};
static const unsigned char gamma_cond_set_190cd[] = { 
0xFA,
0x01,
0x60,
0x30,
0x69,
0xC0,
0xBB,
0xBA,
0xC4,
0xC7,
0xBC,
0xD1,
0xD5,
0xCC,
0xAB,
0xB2,
0xA5,
0xC0,
0xC5,
0xBB,
0x00,
0xBC,
0x00,
0x9F,
0x00,
0xCD
};
static const unsigned char gamma_cond_set_180cd[] = { 
0xFA,
0x01,
0x60,
0x30,
0x69,
0xC0,
0xBB,
0xBC,
0xC4,
0xC6,
0xBC,
0xD1,
0xD6,
0xCC,
0xAC,
0xB3,
0xA5,
0xC0,
0xC5,
#ifdef MANUAL_120504
0xBE,
#else
0xBB,
#endif
0x00,
0xBA,
0x00,
0x9D,
0x00,
0xC9
};
static const unsigned char gamma_cond_set_170cd[] = { 
0xFA,
0x01,
0x60,
0x30,
0x69,
0xBF,
0xB8,
0xBA,
0xC4,
0xC7,
0xBD,
0xD1,
0xD5,
0xCC,
0xAC,
0xB3,
0xA5,
0xC2,
0xC5,
#ifdef MANUAL_120504
0xBE,
#else
0xBB,
#endif
0x00,
0xB6,
0x00,
0x9A,
0x00,
0xC6
};

static const unsigned char gamma_cond_set_160cd[] = { //equal
0xFA,
0x01,
0x60,
0x30,
0x69,
0xBE,
0xB6,
0xBB,
0xC4,
0xC7,
0xBC,
0xD0,
0xD5,
0xCC,
0xAD,
0xB3,
0xA5,
0xC3,
0xC7,
0xBE,
0x00,
0xB3,
0x00,
0x96,
0x00,
0xC3
};

static const unsigned char gamma_cond_set_150cd[] = { 
0xFA,
0x01,
0x60,
0x30,
0x69,
0xBD,
0xB5,
0xBA,
0xC4,
0xC7,
0xBD,
0xD0,
0xD3,
0xCC,
0xAE,
0xB5,
0xA6,
0xC5,
0xC7,
0xBE,
0x00,
0xAF,
0x00,
#ifdef MANUAL_120504
0x94,
#else
0x96,
#endif
0x00,
0xC0
};

static const unsigned char gamma_cond_set_140cd[] = { 
0xFA,
0x01,
0x60,
0x30,
0x69,
0xBC,
0xB2,
0xBB,
0xC4,
0xC7,
0xBC,
0xD0,
0xD3,
0xCB,
0xAE,
0xB5,
0xA8,
0xC4,
0xC8,
0xBF,
0x00,
0xAD,
0x00,
#ifdef MANUAL_120504
0x90,
#else
0x96,
#endif
0x00,
0xBC
};

static const unsigned char gamma_cond_set_130cd[] = { 
0xFA,
0x01,
0x60,
0x30,
0x69,
0xBA,
0xB0,
0xBC,
0xC5,
0xC7,
0xBC,
0xD2,
0xD6,
0xCD,
0xAE,
0xB5,
0xA7,
0xC5,
0xC8,
0xBF,
0x00,
0xA9,
0x00,
0x8D,
0x00,
0xB9
};

static const unsigned char gamma_cond_set_120cd[] = { 
0xFA,
0x01,
0x60,
0x30,
0x69,
0xBA,
0xAB,
0xBB,
0xC5,
0xC6,
0xBC,
0xD2,
0xD5,
0xCD,
0xAD,
0xB5,
0xA7,
0xC7,
0xCA,
0xC2,
0x00,
0xA7,
0x00,
0x8A,
0x00,
0xB5
};

static const unsigned char gamma_cond_set_110cd[] = { 
0xFA,
0x01,
0x60,
0x30,
0x69,
0xB7,
0xA9,
0xBB,
0xC6,
0xC8,
0xBD,
0xD1,
0xD4,
0xCC,
0xAF,
0xB6,
0xA8,
0xC6,
0xCA,
0xC2,
0x00,
0xA3,
0x00,
0x86,
0x00,
0xB1
};

static const unsigned char gamma_cond_set_100cd[] = { 
0xFA,
0x01,
0x60,
0x30,
0x69,
0xB6,
0xA5,
0xBC,
0xC4,
0xC5,
0xBD,
0xD1,
0xD4,
0xCC,
0xB1,
0xB7,
0xA8,
0xC6,
0xCC,
0xC3,
0x00,
0xA0,
0x00,
0x82,
0x00,
0xAD
};

static const unsigned char gamma_cond_set_90cd[] = { 
0xFA,
0x01,
0x60,
0x30,
0x69,
0xB3,
0xA0,
0xBB,
0xC4,
0xC7,
0xBD,
0xD4,
0xD5,
0xCC,
0xAF,
0xB7,
0xA9,
0xC7,
0xCC,
0xC3,
0x00,
0x9C,
0x00,
0x7E,
0x00,
0xA9
};

static const unsigned char gamma_cond_set_80cd[] = { 
0xFA,
0x01,
0x60,
0x30,
0x69,
0xB0,
0x99,
0xBB,
0xC4,
0xC6,
0xBC,
0xD3,
0xD5,
0xCE,
0xB1,
0xB7,
0xA9,
0xC9,
0xCD,
0xC4,
0x00,
0x97,
0x00,
0x7A,
0x00,
0xA4
};

static const unsigned char gamma_cond_set_70cd[] = { 
0xFA,
0x01,
0x60,
0x30,
0x69,
0xAF,
0x94,
0xBB,
0xC4,
0xC6,
0xBD,
0xD4,
0xD5,
0xCD,
0xB1,
0xB7,
0xAA,
0xCA,
0xCE,
0xC6,
0x00,
0x93,
0x00,
0x76,
0x00,
0x9F
};

static const unsigned char gamma_cond_set_60cd[] = { 
0xFA,
0x01,
0x60,
0x30,
0x69,
0xAA,
0x85,
0xBE,
0xC3,
0xC5,
0xBC,
0xD4,
0xD5,
0xCE,
0xB2,
0xB9,
0xAA,
0xCA,
0xCF,
0xC5,
0x00,
0x8E,
0x00,
0x70,
0x00,
0x9A
};

static const unsigned char gamma_cond_set_50cd[] = { 
0xFA,
0x01,
0x60,
0x30,
0x69,
0xA1,
0x6F,
0xBE,
0xC3,
0xC3,
0xBC,
0xD5,
0xD5,
0xCE,
0xB3,
0xB9,
0xAB,
0xCC,
0xCF,
0xC6,
0x00,
0x88,
0x00,
0x6B,
0x00,
0x94
};

static const unsigned char gamma_cond_set_40cd[] = { 
0xFA,
0x01,
0x60,
0x30,
0x69,
0xA1,
0x6F,
0xBE,
0xC3,
0xC1,
0xBE,
0xD3,
0xD5,
0xCC,
0xB5,
0xB9,
0xAC,
0xCC,
0xD1,
0xC7,
0x00,
0x82,
0x00,
0x64,
0x00,
0x8D
};

static const unsigned char gamma_cond_set_30cd[] = { 
0xFA,
0x01,
0x60,
0x30,
0x69,
0xA1,
0x6F,
0xBE,
0xBF,
0xBB,
0xBD,
0xD3,
0xD4,
0xCE,
0xB6,
0xBA,
0xAD,
0xCD,
0xD1,
0xC7,
0x00,
0x7B,
0x00,
0x5D,
0x00,
0x85
};

enum {
	ELVSS_300=0x8B, /*-4.4V*/
	ELVSS_290,
	ELVSS_280,
	ELVSS_270,
	ELVSS_260,
	ELVSS_250,
	ELVSS_240,
	ELVSS_230,
	ELVSS_220,
	ELVSS_210,
	ELVSS_200,  /*-3.4V*/
	ELVSS_190,
	ELVSS_180,
	ELVSS_170,
	ELVSS_160,
	ELVSS_150,
	ELVSS_140,
	ELVSS_130,
	ELVSS_120,
	ELVSS_110,  /*-2.4V*/
	ELVSS_STATUS_MAX,
};

enum {
	GAMMA_30CD,
	GAMMA_40CD,
	GAMMA_50CD,
	GAMMA_60CD,
	GAMMA_70CD,
	GAMMA_80CD,
	GAMMA_90CD,
	GAMMA_100CD,
	GAMMA_110CD,
	GAMMA_120CD,
	GAMMA_130CD,
	GAMMA_140CD,
	GAMMA_150CD,
	GAMMA_160CD,
	GAMMA_170CD,
	GAMMA_180CD,
	GAMMA_190CD,
	GAMMA_200CD,
	GAMMA_210CD,
	GAMMA_220CD,
	GAMMA_230CD,
	GAMMA_240CD,
	GAMMA_250CD,
	GAMMA_260CD,
	GAMMA_270CD,
	GAMMA_280CD,
	GAMMA_290CD,
	GAMMA_300CD,
	GAMMA_MAX /*25*/
};

struct gamma_table {
	int lum; /*luminance*/
	int elvss_level;
	unsigned char *gama_cond;
	int size;
};

static struct gamma_table gamma_cond_set[] = {
	{GAMMA_30CD,	ELVSS_110,	(unsigned char *)&gamma_cond_set_30cd,	sizeof(gamma_cond_set_30cd)},	/*0*/
	{GAMMA_40CD,	ELVSS_110,	(unsigned char *)&gamma_cond_set_40cd,	sizeof(gamma_cond_set_40cd)},
	{GAMMA_50CD,	ELVSS_110,	(unsigned char *)&gamma_cond_set_50cd,	sizeof(gamma_cond_set_50cd)},
	{GAMMA_60CD,	ELVSS_110,	(unsigned char *)&gamma_cond_set_60cd,	sizeof(gamma_cond_set_60cd)},
	{GAMMA_70CD,	ELVSS_110,	(unsigned char *)&gamma_cond_set_70cd,	sizeof(gamma_cond_set_70cd)},
	{GAMMA_80CD,	ELVSS_110,	(unsigned char *)&gamma_cond_set_80cd,	sizeof(gamma_cond_set_80cd)},	/*5*/
	{GAMMA_90CD,	ELVSS_110,	(unsigned char *)&gamma_cond_set_90cd,	sizeof(gamma_cond_set_90cd)},
	{GAMMA_100CD,	ELVSS_110,	(unsigned char *)&gamma_cond_set_100cd,	sizeof(gamma_cond_set_100cd)},
	{GAMMA_110CD,	ELVSS_110,	(unsigned char *)&gamma_cond_set_110cd,	sizeof(gamma_cond_set_110cd)},
	{GAMMA_120CD,	ELVSS_120,	(unsigned char *)&gamma_cond_set_120cd,	sizeof(gamma_cond_set_120cd)},
	{GAMMA_130CD,	ELVSS_130,	(unsigned char *)&gamma_cond_set_130cd,	sizeof(gamma_cond_set_130cd)},	/*10*/
	{GAMMA_140CD,	ELVSS_140,	(unsigned char *)&gamma_cond_set_140cd,	sizeof(gamma_cond_set_140cd)},
	{GAMMA_150CD,	ELVSS_150,	(unsigned char *)&gamma_cond_set_150cd,	sizeof(gamma_cond_set_150cd)},
	{GAMMA_160CD,	ELVSS_160,	(unsigned char *)&gamma_cond_set_160cd,	sizeof(gamma_cond_set_160cd)},
	{GAMMA_170CD,	ELVSS_170,	(unsigned char *)&gamma_cond_set_170cd,	sizeof(gamma_cond_set_170cd)},
	{GAMMA_180CD,	ELVSS_180,	(unsigned char *)&gamma_cond_set_180cd,	sizeof(gamma_cond_set_180cd)},	/*15*/
	{GAMMA_190CD,	ELVSS_190,	(unsigned char *)&gamma_cond_set_190cd,	sizeof(gamma_cond_set_190cd)},
	{GAMMA_200CD,	ELVSS_200,	(unsigned char *)&gamma_cond_set_200cd,	sizeof(gamma_cond_set_200cd)},
	{GAMMA_210CD,	ELVSS_210,	(unsigned char *)&gamma_cond_set_210cd,	sizeof(gamma_cond_set_210cd)},
	{GAMMA_220CD,	ELVSS_220,	(unsigned char *)&gamma_cond_set_220cd,	sizeof(gamma_cond_set_220cd)},
	{GAMMA_230CD,	ELVSS_230,	(unsigned char *)&gamma_cond_set_230cd,	sizeof(gamma_cond_set_230cd)},	/*20*/
	{GAMMA_240CD,	ELVSS_240,	(unsigned char *)&gamma_cond_set_240cd,	sizeof(gamma_cond_set_240cd)},
	{GAMMA_250CD,	ELVSS_250,	(unsigned char *)&gamma_cond_set_250cd,	sizeof(gamma_cond_set_250cd)},
	{GAMMA_260CD,	ELVSS_260,	(unsigned char *)&gamma_cond_set_260cd,	sizeof(gamma_cond_set_260cd)},
	{GAMMA_270CD,	ELVSS_270,	(unsigned char *)&gamma_cond_set_270cd,	sizeof(gamma_cond_set_270cd)},
	{GAMMA_280CD,	ELVSS_280,	(unsigned char *)&gamma_cond_set_280cd,	sizeof(gamma_cond_set_280cd)},	/*25*/
	{GAMMA_290CD,	ELVSS_290,	(unsigned char *)&gamma_cond_set_290cd,	sizeof(gamma_cond_set_290cd)},
	{GAMMA_300CD,	ELVSS_300,	(unsigned char *)&gamma_cond_set_300cd,	sizeof(gamma_cond_set_300cd)}
};

#define GAMA_COND_SET_TABLE_SIZE sizeof(gamma_cond_set)/sizeof(struct gamma_table)

static const unsigned char gamma_update_cmd[] = {0xF7, 0x03};
